// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate go run github.com/wolfogre/gtag/cmd/gtag -types Bill -tags bson .
package domain

import (
	"reflect"
	"strings"
)

var (
	valueOfBill = Bill{}
	typeOfBill  = reflect.TypeOf(valueOfBill)

	_                = valueOfBill.ID
	fieldOfBillID, _ = typeOfBill.FieldByName("ID")
	tagOfBillID      = fieldOfBillID.Tag

	_                    = valueOfBill.BookId
	fieldOfBillBookId, _ = typeOfBill.FieldByName("BookId")
	tagOfBillBookId      = fieldOfBillBookId.Tag

	_                   = valueOfBill.Money
	fieldOfBillMoney, _ = typeOfBill.FieldByName("Money")
	tagOfBillMoney      = fieldOfBillMoney.Tag

	_                  = valueOfBill.Type
	fieldOfBillType, _ = typeOfBill.FieldByName("Type")
	tagOfBillType      = fieldOfBillType.Tag

	_                      = valueOfBill.Category
	fieldOfBillCategory, _ = typeOfBill.FieldByName("Category")
	tagOfBillCategory      = fieldOfBillCategory.Tag

	_                        = valueOfBill.CreateUser
	fieldOfBillCreateUser, _ = typeOfBill.FieldByName("CreateUser")
	tagOfBillCreateUser      = fieldOfBillCreateUser.Tag

	_                        = valueOfBill.CreateTime
	fieldOfBillCreateTime, _ = typeOfBill.FieldByName("CreateTime")
	tagOfBillCreateTime      = fieldOfBillCreateTime.Tag

	_                        = valueOfBill.UpdateTime
	fieldOfBillUpdateTime, _ = typeOfBill.FieldByName("UpdateTime")
	tagOfBillUpdateTime      = fieldOfBillUpdateTime.Tag

	_                    = valueOfBill.Remark
	fieldOfBillRemark, _ = typeOfBill.FieldByName("Remark")
	tagOfBillRemark      = fieldOfBillRemark.Tag

	_                    = valueOfBill.Images
	fieldOfBillImages, _ = typeOfBill.FieldByName("Images")
	tagOfBillImages      = fieldOfBillImages.Tag
)

// BillTags indicate tags of type Bill
type BillTags struct {
	ID         string // `bson:"_id,omitempty" json:"_id"`
	BookId     string // `bson:"book_id" json:"book_id"`
	Money      string // `bson:"money" json:"money"`
	Type       string // `bson:"type" json:"type"`
	Category   string // `bson:"category" json:"category"`
	CreateUser string // `bson:"create_user" json:"create_user"`
	CreateTime string // `bson:"create_time" json:"create_time"`
	UpdateTime string // `bson:"update_time" json:"update_time"`
	Remark     string // `bson:"remark" json:"remark"`
	Images     string // `bson:"images" json:"images"`
}

// Values return all tags of Bill as slice
func (t *BillTags) Values() []string {
	return []string{
		t.ID,
		t.BookId,
		t.Money,
		t.Type,
		t.Category,
		t.CreateUser,
		t.CreateTime,
		t.UpdateTime,
		t.Remark,
		t.Images,
	}
}

// Tags return specified tags of Bill
func (*Bill) Tags(tag string, convert ...func(string) string) BillTags {
	conv := func(in string) string { return strings.TrimSpace(strings.Split(in, ",")[0]) }
	if len(convert) > 0 {
		conv = convert[0]
	}
	if conv == nil {
		conv = func(in string) string { return in }
	}
	return BillTags{
		ID:         conv(tagOfBillID.Get(tag)),
		BookId:     conv(tagOfBillBookId.Get(tag)),
		Money:      conv(tagOfBillMoney.Get(tag)),
		Type:       conv(tagOfBillType.Get(tag)),
		Category:   conv(tagOfBillCategory.Get(tag)),
		CreateUser: conv(tagOfBillCreateUser.Get(tag)),
		CreateTime: conv(tagOfBillCreateTime.Get(tag)),
		UpdateTime: conv(tagOfBillUpdateTime.Get(tag)),
		Remark:     conv(tagOfBillRemark.Get(tag)),
		Images:     conv(tagOfBillImages.Get(tag)),
	}
}

// TagsBson is alias of Tags("bson")
func (*Bill) TagsBson() BillTags {
	var v *Bill
	return v.Tags("bson")
}
